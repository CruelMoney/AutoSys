@INPROCEEDINGS{839269, 
author={Hilburn, T.B. and Bagert, D.J.}, 
booktitle={Frontiers in Education Conference, 1999. FIE '99. 29th Annual}, 
title={A software engineering curriculum model}, 
year={1999}, 
month={Nov}, 
volume={1}, 
pages={12A4/6-12A411 vol.1}, 
abstract={The development of software engineering programs is a formidable undertaking. Undergraduate software engineering curricula are currently at an "early adopter" stage and few schools are willing to risk developing a whole new program (or completely overhauling an existing program). There are serious problems for the development of such programs: the software engineering profession is immature; there is confusion about the difference between computer science and software engineering; there is a lack of understanding and appreciation among computer science faculty about the need for software engineering education; there is little available material on curriculum guidance; and there are currently no accredited programs in software engineering. For a number of years the WGSEET (Working Group on Software Engineering Education and Training) has been working to advance the state of software engineering and training. A recent effort has been the development of a set of guidelines that would assist faculty in developing software engineering programs. In this paper we describe a "curriculum model" that is an outgrowth of the guidelines work of the WGSEET. The curriculum model supports the development of a variety of degree programs which emphasize and focus on software engineering (e.g., software engineering, computer science, information systems, and computer engineering). The model provide an overall architecture, a set of design guidelines, descriptions of software engineering curriculum content that can be used to design courses and curricula, and several sample curricula.}, 
keywords={computer science education;educational courses;software engineering;Working Group on Software Engineering Education and Training;computer engineering;computer science;curriculum guidance;information systems;software engineering curriculum content;software engineering curriculum model;software engineering education;software engineering programs development;undergraduate software engineering curricula;Computer science;Design engineering;Educational institutions;Educational programs;Engineering education;Guidelines;Knowledge engineering;Software engineering;Software quality;Systems engineering and theory}, 
doi={10.1109/FIE.1999.839269}, 
ISSN={0190-5848},}
@INPROCEEDINGS{1158672, 
author={Pour, G.}, 
booktitle={Frontiers in Education, 2002. FIE 2002. 32nd Annual}, 
title={Integrating agent-oriented enterprise software engineering into software engineering curriculum}, 
year={2002}, 
month={Nov}, 
volume={3}, 
pages={S2G-8-S2G-12 vol.3}, 
abstract={Agent-oriented enterprise software engineering (AOESE) has emerged as a promising approach to developing Web-based enterprise software systems. AOESE is based on developing and evolving enterprise software systems from selected pre-engineered and pre-tested software agents, and then assembling them within appropriate software architectures. We view agent-oriented software engineering as an extension of conventional component-based software engineering, and software agents as next-generation software components. Software agents offer greater flexibility and adaptability than traditional components. However, making transition to agent-oriented enterprise software engineering requires software engineers to learn a new set of technical skills. To provide such a learning opportunity, the author has created a new course sequence that integrates both agent-oriented enterprise software engineering and component-based enterprise software engineering into software engineering curriculum. A new course in the sequence is intended to provide students with the opportunity to acquire a good understanding of the key concepts and principles of agent-oriented enterprise software engineering, and the new opportunities and challenges involved in developing Web-based multi-agent systems. The course is designed to help build a solid foundation for integration of research into education in the area of agent-oriented enterprise software engineering. The course has special emphasis on developing architectures and frameworks for Web-based multi-agent enterprise systems rather than developing single agent. In this paper, the author shares her experience of developing the course, and presents the course organization, its components, and the future plans for the course.}, 
keywords={computer science education;multi-agent systems;software agents;software engineering;Web-based enterprise software systems;Web-based multi-agent systems;agent-oriented enterprise software engineering;agent-oriented software engineering;course components;course development;course organization;course sequence;enterprise software systems;learning opportunity;next-generation software components;pre-engineered software agents;pre-tested software agents;software agents;software architectures;software engineering curriculum;work0ows;Application software;Assembly systems;Computer science education;Multiagent systems;Software agents;Software architecture;Software engineering;Software reusability;Software systems;Solids}, 
doi={10.1109/FIE.2002.1158672}, 
ISSN={0190-5848},}
@INPROCEEDINGS{5267186, 
author={Iqbal, M. and Rizwan, M.}, 
booktitle={Information and Communication Technologies, 2009. ICICT '09. International Conference on}, 
title={Application of 80/20 rule in software engineering Waterfall Model}, 
year={2009}, 
month={Aug}, 
pages={223-228}, 
abstract={Software process is the most important part of software project management, and software process models are important means of implementing the software process in any software organization. When there is need to improve the software process, then the need to improve the work-task part (software process models) of the software process must arise. As, there is need of increasing the commitment of software project managers through out the software development life cycle (SDLC), so we need to give them the list of activities in Waterfall Model, which should be made efficient by the software development team, to get the 80% productivity (output) easily, by reducing the effort of software development and ultimately increasing the performance of the software process. So, the idea of 80/20 rule (Pareto Principle, 1935) can be applied in the software engineering process model, in this regard. The Pareto Principle (1935) directed us to focus on what is really important in any field and field's work. Software process is most important part of software project management (SPM). This is also then ultimately needed for software project management (SPM) improvement. Our main research work is to improve the work-task part of the software process (i.e. software process models by applying the Pareto Principle - 80/20 Rule (1935) (or law of vital few) (1935), in the software engineering process models (or work-task part of the software process). This will be to facilitate the software project manager, using the software process models practically more efficient than without application of 80/20 Rule in software engineering Waterfall model. This has resulted in the reduction of the software development effort and increase in the performance of the software process. The results (efficient and improved software process models) will be implemented in the software industry, by software project managers, by focusing on the list of activities giving 80 percent of the overall productivity o- f the software process. The results will be the list of activities having the capability to give 20 percent of the overall productivity of the software Waterfall process, to be ignored, eliminated or designated to reduce the effort.}, 
keywords={project management;software development management;software metrics;software process improvement;software prototyping;80/20 rule;Pareto principle;software development effort;software development life cycle;software development team;software engineering waterfall model;software organization;software process model;software project management improvement;Application software;Computer industry;Engineering management;Productivity;Programming;Project management;Scanning probe microscopy;Software development management;Software engineering;Software performance}, 
doi={10.1109/ICICT.2009.5267186},}